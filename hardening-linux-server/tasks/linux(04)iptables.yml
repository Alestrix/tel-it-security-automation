---
# tel-it-security-automation :- Ansible roles for automated security hardening.  
# Copyright (c) 2020 Maximilian Hertstein [...] Deutsche Telekom AG 
# contact: devsecops@telekom.de 
# This file is distributed under the conditions of the Apache-2.0 license. 
# For details see the files LICENSING, LICENSE, and/or COPYING on the toplevel.

# ========================================================================
# Deutsch Telekom IT - DevSecOps Team
# ------------------------------------------------------------------------
# Security Hardening & Compliance Checks
# Linux OS for Servers (3.65)
#
# Tasks: 04 IPTables
# ========================================================================

# Disable IPTables for Suse Linux 12 as they messed up iptables with 
# SuSEFirewall2 tool!

- name: set variable to disable IPTables configuration
  set_fact:
    config_iptables: false
  when: not config_req_02 | default(true)

- name: check if ipv6 is enabled and set list of ip version
  set_fact:
    ip_version: [ "ipv4", "{{ 'ipv6' if ansible_all_ipv6_addresses is defined else '' }}" ]

# Start IPTables on RedHat based systems and configure iptables-config file.

- name: install tools to make iptables persistent
  package:
    name: '{{ os_iptables_tools }}'
    state: present
  when: 
    - config_iptables | default(true)
    - os_iptables_tools | length > 0

- name: create services to reload {{ item }} rules on boot (Suse)
  blockinfile:
    path: /etc/systemd/system/{{ item }}-restore.service
    block: |
      [Unit]
      Description=Load {{ item }} rules on boot

      [Service]
      Type=oneshot
      ExecStart=/bin/sh -c "{{ item }}-restore {{ '-w 60' if ansible_distribution_major_version == "15" else '' }} < /etc/{{ item }}.rules"

      [Install]
      WantedBy=multi-user.target
    create: yes
    owner: root
    group: root
    mode: '644'
  with_items:
    - "iptables"
    - "{{ 'ip6tables' if ansible_all_ipv6_addresses is defined else '' }}"
  when:
    - item != '' 
    - config_iptables | default(true)
    - ansible_os_family == "Suse"

- name: uninstall firewalld/nftables to avoid conflicts
  package:
    name: "{{ item }}"
    state: absent
  with_items: 
    - "firewalld"
    - "nftables"
  when: 
    - config_iptables | default(true)

- name: make iptables ipv4 rules persistent (RedHat)
  lineinfile:
    path: '/etc/sysconfig/iptables-config'
    regexp: '^({{ item }})=.*$'
    line: '\1="yes"'
    backrefs: yes
  with_items: 
    - "IPTABLES_SAVE_ON_STOP"
    - "IPTABLES_SAVE_ON_RESTART"
  when: 
    - config_iptables | default(true)
    - ansible_os_family == "RedHat"
    
- name: make iptables ipv6 rules persistent (RedHat)
  lineinfile:
    path: '/etc/sysconfig/ip6tables-config'
    regexp: '^({{ item }})=.*$'
    line: '\1="yes"'
    backrefs: yes
  with_items: 
    - "IP6TABLES_SAVE_ON_STOP"
    - "IP6TABLES_SAVE_ON_RESTART"
  when: 
    - config_iptables | default(true)
    - ansible_os_family == "RedHat"
    - ansible_all_ipv6_addresses is defined

- name: enable iptables service for ipv4 (RedHat)
  systemd:
    name: "{{ os_iptables_service }}"
    state: "{{ enable_iptables | ternary('started','stopped') }}"
    enabled: "{{ enable_iptables }}"
  when: 
    - config_iptables | default(true)
    - ansible_os_family == "RedHat"

- name: enable iptables service for ipv6 (RedHat)
  systemd:
    name: "{{ os_ip6tables_service }}"
    state: "{{ enable_iptables | ternary('started','stopped') }}"
    enabled: "{{ enable_iptables }}"
  when: 
    - config_iptables | default(true)
    - ansible_all_ipv6_addresses is defined
    - ansible_os_family == "RedHat"

# Req-46: If iptables is used, policies for loopback traffic must be 
#         configured.

- name: req-046.1 iptables configure loopback traffic input rule
  iptables:
    chain: INPUT
    in_interface: lo
    jump: ACCEPT
    ip_version: "{{ item }}"  
  with_items:
    - "{{ ip_version }}"
  when:
    - item != '' 
    - config_req_46 | default(true)
    - config_iptables | default(true)

- name: req-046.2 iptables configure loopback traffic output rule
  iptables:
    chain: OUTPUT
    out_interface: lo
    jump: ACCEPT
    ip_version: "{{ item }}"  
  with_items:
    - "{{ ip_version }}"
  when:
    - item != '' 
    - config_req_46 | default(true)
    - config_iptables | default(true)

- name: req-046.3 iptables configure loopback traffic drop rule
  iptables:
    chain: INPUT
    source: "{{ item.source }}"
    jump: DROP
    ip_version: "{{ item.ip_ver }}"
  with_items:
    - { ip_ver: ipv4, source: "127.0.0.0/8" }
    - { ip_ver: "{{ 'ipv6' if ansible_all_ipv6_addresses is defined else '' }}", source: "::1" }
  when: 
    - item.ip_ver != '' 
    - config_req_46 | default(true)
    - config_iptables | default(true)

# Req-47: If iptables is used, policies for outbound and established 
#         connections must be configured.

- name: req-047.1 configure outbound connections
  iptables:
    chain: OUTPUT
    protocol: '{{ item[1] }}'
    match: state
    ctstate: NEW,ESTABLISHED
    jump: ACCEPT
    ip_version: "{{ item[0] }}"
  with_nested:
    - "{{ ip_version }}"
    - "{{ iptables_protocols }}"
  when:
    - item[0] != '' 
    - config_req_47 | default(true)
    - config_iptables | default(true)

- name: req-047.2 configure inbound connections
  iptables:
    chain: INPUT
    protocol: '{{ item[1] }}'
    match: state
    ctstate: ESTABLISHED
    jump: ACCEPT
    ip_version: "{{ item[0] }}"
  with_nested:
    - "{{ ip_version }}"
    - "{{ iptables_protocols }}"
  when:
    - item[0] != ''
    - config_req_47 | default(true)
    - config_iptables | default(true)

# Req-48: If iptables is used, policies must exist for all ports in 
#         listening state.

- name: req-048.1 configure rules for tcp
  iptables:
    chain: INPUT
    protocol: "tcp"
    destination_port: "{{ item[1] }}"
    match: state
    ctstate: NEW
    jump: ACCEPT
    ip_version: "{{ item[0] }}"
  with_nested:
    - "{{ ip_version }}"
    - "{{ set_tcp_services }}"
  when:
    - item[0] != ''
    - config_req_48 | default(true)
    - config_iptables | default(true)
    - set_tcp_services | length > 0

- name: req-048.2 configure rules for udp
  iptables:
    chain: INPUT
    protocol: "udp"
    destination_port: "{{ item[1] }}"
    match: state
    ctstate: NEW
    jump: ACCEPT
    ip_version: "{{ item[0] }}"
  with_nested:
    - "{{ ip_version }}"
    - "{{ set_udp_services }}"
  when:
    - item[0] != ''
    - config_req_48 | default(true)
    - config_iptables | default(true)
    - set_udp_services | length > 0

- name: req-048.3 configure rules for icmp (ping)
  iptables:
    chain: INPUT
    protocol: "{{ item.protocol }}"
    icmp_type: "{{ item.type }}"
    match: state
    ctstate: NEW,ESTABLISHED,RELATED
    jump: ACCEPT
    ip_version: "{{ item.ip_ver }}"
  with_items:
    - { ip_ver: ipv4, protocol: "icmp", type: "8" }
    - { ip_ver: "{{ 'ipv6' if ansible_all_ipv6_addresses is defined else '' }}", protocol: "icmpv6", type: "128" }
  when: 
    - item.ip_ver != '' 
    - config_req_48 | default(true)
    - config_iptables | default(true)

# Req-49: If iptables is used, the default policy for tables INPUT and FORWARD
#         must be configured to drop all traffic.
- name: req-049.1 configure default deny policies
  iptables:
    chain: '{{ item[1] }}'
    policy: DROP
    ip_version: "{{ item[0] }}"
  with_nested:
    - "{{ ip_version }}"
    - [ "INPUT", "OUTPUT", "FORWARD" ]
  when:
    - item[0] != ''
    - config_req_49 | default(true)
    - config_iptables | default(true) 

# IPTables rules must be written to config file

- name: make iptables rules persistent (Ubuntu)
  shell: "iptables-save > {{ os_iptables_rules }}"
  changed_when: false
  when: 
    - config_iptables | default(true)
    - ansible_os_family != "RedHat"
    - not ansible_check_mode

- name: make ip6tables rules persistent (Ubuntu)
  shell: "ip6tables-save > {{ os_ip6tables_rules }}"
  changed_when: false
  when: 
    - config_iptables | default(true)
    - ansible_os_family != "RedHat"
    - not ansible_check_mode
    - ansible_all_ipv6_addresses is defined

- name: reload systemctl deamon (Suse)
  shell: systemctl daemon-reload
  failed_when: false
  changed_when: false
  when:
    - config_iptables | default(true)
    - ansible_os_family == "Suse"
    - not ansible_check_mode

- name: enable iptables service for ipv4 (Suse)
  systemd:
    name: "{{ os_iptables_service }}"
    state: "{{ enable_iptables | ternary('started','stopped') }}"
    enabled: "{{ enable_iptables }}"
  when: 
    - config_iptables | default(true)
    - ansible_os_family == "Suse"
    - not ansible_check_mode

- name: enable iptables service for ipv6 (Suse)
  systemd:
    name: "{{ os_ip6tables_service }}"
    state: "{{ enable_iptables | ternary('started','stopped') }}"
    enabled: "{{ enable_iptables }}"
  when: 
    - config_iptables | default(true)
    - ansible_os_family == "Suse"
    - not ansible_check_mode
    - ansible_all_ipv6_addresses is defined